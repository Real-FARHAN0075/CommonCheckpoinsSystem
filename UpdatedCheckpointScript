-- [ Hey user! I have provided a script created by FARHAN0075 below. Please inspect it and grant
-- me permission for scripting on Hidden Devs. This script meets all the requirements outlined.
-- If you are a scripter, you should understand how this script works and how to utilize it effectively.
-- ]

-- [ The Script below Combines LeaderBoard and SkipStage ]

-- [ A Script created by FARHAN0075 ]


local PlayersService = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local SKIP_STAGE_PRODUCT_ID = 1866807743


local paymentSkipEvent = ReplicatedStorage:WaitForChild("PaymentSkip")
local freeSkipEvent = ReplicatedStorage:WaitForChild("FreeSkip")

local paymentSkipEvent = ReplicatedStorage:WaitForChild("PaymentSkip")
local DataStoreService = game:GetService("DataStoreService")
local CheckpointStore = DataStoreService:GetDataStore("CheckPointStore")
local DeathsStore = DataStoreService:GetDataStore("DeathsStore")
local JumpsStore = DataStoreService:GetDataStore("JumpsStore") -- DataStore for tracking jumps
local PlayersService = game:GetService("Players")

-- Saves the current stage, death count, and jump count of a player to the DataStores
local function SaveCurrent(Player)
	local Leaderstats = Player:FindFirstChild("leaderstats")
	if not Leaderstats then return end

	local Stage = Leaderstats:FindFirstChild("Stage")
	local Deaths = Leaderstats:FindFirstChild("Deaths")
	local Jumps = Leaderstats:FindFirstChild("Jumps") -- Retrieve the Jumps value

	if not Stage or not Deaths or not Jumps then return end

	-- Use pcall to safely attempt saving data and catch any errors
	local Success, Errormsg = pcall(function()
		CheckpointStore:SetAsync(Player.UserId, { ["Stage"] = Stage.Value })
		DeathsStore:SetAsync(Player.UserId, { ["Deaths"] = Deaths.Value })
		JumpsStore:SetAsync(Player.UserId, { ["Jumps"] = Jumps.Value }) -- Save jump data
	end)
	if not Success then warn(Errormsg) end -- Log any errors encountered
end

-- Loads the player's stage, death count, and jump count from DataStores
local function LoadCurrent(Player, StageInstance, DeathsInstance, JumpsInstance)
	local Success, Errormsg = pcall(function()
		local Data = CheckpointStore:GetAsync(Player.UserId)
		local DeathsData = DeathsStore:GetAsync(Player.UserId)
		local JumpsData = JumpsStore:GetAsync(Player.UserId) -- Load jump data

		if Data then StageInstance.Value = Data.Stage end
		if DeathsData then DeathsInstance.Value = DeathsData.Deaths end
		if JumpsData then JumpsInstance.Value = JumpsData.Jumps end -- Set the Jumps value
	end)
	if not Success then warn(Errormsg) end -- Log any errors encountered
end

-- Updates the player's GUI to reflect current stage, death count, and jump count
local function UpdateGui(Player)
	local PlayerGui = Player:FindFirstChild("PlayerGui")
	if not PlayerGui then return end

	local GameGuiScreen = PlayerGui:FindFirstChild("GameGuiScreen")
	if not GameGuiScreen then return end

	local SettingsFrame = GameGuiScreen:FindFirstChild("SettingsFrame")
	if not SettingsFrame then return end

	local MainFrame = SettingsFrame:FindFirstChild("MainFrame")
	if not MainFrame then return end

	local StatusFrame = MainFrame:FindFirstChild("StatusFrame")
	if not StatusFrame then return end

	local CheckpointsNumber = StatusFrame:FindFirstChild("CheckpointsNumber")
	local DeathCounter = StatusFrame:FindFirstChild("DeathCounter")
	local JumpCounter = StatusFrame:FindFirstChild("JumpCounter") -- Retrieve the JumpCounter

	local Leaderstats = Player:FindFirstChild("leaderstats")
	if Leaderstats then
		local Stage = Leaderstats:FindFirstChild("Stage")
		local Deaths = Leaderstats:FindFirstChild("Deaths")
		local Jumps = Leaderstats:FindFirstChild("Jumps") -- Retrieve the Jumps value

		if Stage and CheckpointsNumber then
			CheckpointsNumber.Text = Stage.Value
		end
		if Deaths and DeathCounter then
			DeathCounter.Text = Deaths.Value
		end
		if Jumps and JumpCounter then
			JumpCounter.Text = Jumps.Value -- Update JumpCounter display
		end
	end
end

-- Sets up checkpoint touch interactions for players
local function SetupCheckpointTouch()
	local function GetStageCount(Player)
		local Leaderstats = Player:FindFirstChild("leaderstats")
		if not Leaderstats then return end

		local Stage = Leaderstats:FindFirstChild("Stage")
		if not Stage then return end

		return Stage.Value, Stage
	end

	local function SetCheckpointTouch(v)
		v.CanTouch = true
		local DelayTable = {}
		local ObjectNumber = tonumber(v.Name)
		v.Touched:Connect(function(Hit)
			local Character = Hit:FindFirstAncestorWhichIsA("Model")
			if not Character then return end

			if table.find(DelayTable, Character.Name) then return end

			local Player = PlayersService:GetPlayerFromCharacter(Character)
			if not Player then return end
			if not Player:FindFirstChild("LoadedCheckpoint") then return end

			local CurrentStage, StageInstance = GetStageCount(Player)
			if CurrentStage then
				if ObjectNumber <= CurrentStage then return end
				if (CurrentStage + 1) < ObjectNumber then return end

				if StageInstance.Value < 100 then
					StageInstance.Value = ObjectNumber
					UpdateGui(Player)
					table.insert(DelayTable, Character.Name)
					task.wait(1)

					-- Remove the player's name from the DelayTable after waiting
					for i, name in pairs(DelayTable) do
						if name == Character.Name then
							table.remove(DelayTable, i)
							break
						end
					end
					SaveCurrent(Player)
				end
			end
		end)
	end

	-- Setup checkpoint touch for existing checkpoints and any added later
	for _, v in pairs(workspace:WaitForChild("SavingCheckpoints"):GetChildren()) do
		SetCheckpointTouch(v)
	end
	workspace["SavingCheckpoints"].ChildAdded:Connect(function(v)
		SetCheckpointTouch(v)
	end)
end

SetupCheckpointTouch()

-- Handle player addition and initialize their state
PlayersService.PlayerAdded:Connect(function(Player)
	local Leaderstats = Instance.new("Folder")
	Leaderstats.Name = "leaderstats"
	Leaderstats.Parent = Player

	local Stage = Instance.new("IntValue")
	Stage.Name = "Stage"
	Stage.Value = 1
	Stage.Parent = Leaderstats

	local Deaths = Instance.new("IntValue")
	Deaths.Name = "Deaths"
	Deaths.Value = 0
	Deaths.Parent = Leaderstats

	local Jumps = Instance.new("IntValue")
	Jumps.Name = "Jumps"
	Jumps.Value = 0
	Jumps.Parent = Leaderstats -- Initialize Jumps value

	local Folder = workspace:WaitForChild("SavingCheckpoints")

	local function OnCharacter(Character)
		local HumanoidRootPart
		for i = 1, 10 do
			if Character:FindFirstChild("HumanoidRootPart") then
				HumanoidRootPart = Character.HumanoidRootPart
				break
			end
			task.wait(1)
		end
		if HumanoidRootPart then
			local StageSpawn = Folder:FindFirstChild(tostring(Stage.Value))
			if StageSpawn then
				HumanoidRootPart.CFrame = StageSpawn.CFrame + Vector3.new(0, 5, 0) -- Position player above the spawn point
			end
		end
	end

	local function OnNewStage(StageNumber)
		local team = game:GetService("Teams"):FindFirstChild(tostring(StageNumber))
		if team then
			Player.Team = team
		end
		UpdateGui(Player) -- Update GUI to reflect new stage
	end

	LoadCurrent(Player, Stage, Deaths, Jumps) -- Load saved data
	UpdateGui(Player) -- Initialize GUI
	local Loaded = Instance.new("BoolValue")
	Loaded.Name = "LoadedCheckpoint"
	Loaded.Parent = Player

	-- Set the player's stage to the highest checkpoint if the current one is missing
	if not Folder:FindFirstChild(tostring(Stage.Value)) then
		local Max = -1
		for _, v in pairs(Folder:GetChildren()) do
			local Number = tonumber(v.Name)
			if Number and Max < Number then
				Max = Number
			end
		end
		Stage.Value = Max
	end

	OnNewStage(Stage.Value) -- Update team and GUI for the initial stage
	Stage:GetPropertyChangedSignal("Value"):Connect(function()
		OnNewStage(Stage.Value) -- Update on stage change
	end)

	if Player.Character then OnCharacter(Player.Character) end
	Player.CharacterAdded:Connect(OnCharacter)

	-- Handle player chat commands
	Player.Chatted:Connect(function(message)
		if message:lower() == "!skip" then
			if Stage.Value < 100 then
				Stage.Value = Stage.Value + 1
				OnNewStage(Stage.Value)
				SaveCurrent(Player)
			end
		end
	end)

	-- Handle character death to increment death count
	Player.CharacterAdded:Connect(function(Character)
		local Humanoid = Character:WaitForChild("Humanoid")
		Humanoid.Died:Connect(function()
			Deaths.Value = Deaths.Value + 1
			UpdateGui(Player)
			task.wait(0.5) -- Wait before saving data
			SaveCurrent(Player)
		end)
	end)

	-- Periodically check and kill the player if the stage hasn't changed
	local LastStageValue = Stage.Value
	while true do
		task.wait(1200) -- 20 minutes
		if Stage.Value == LastStageValue then
			if Player.Character and Player.Character:FindFirstChild("Humanoid") then
				Player.Character.Humanoid.Health = 0
			end
		end
		LastStageValue = Stage.Value
	end
end)

-- Save player data when they leave the game
PlayersService.PlayerRemoving:Connect(function(Player)
	if Player:FindFirstChild("LoadedCheckpoint") then
		SaveCurrent(Player)
	end
end)

-- Save all player data when the game is closed
game:BindToClose(function()
	if game:GetService("RunService"):IsStudio() then task.wait(1) return end
	for _, Player in pairs(PlayersService:GetPlayers()) do
		if Player:FindFirstChild("LoadedCheckpoint") then
			SaveCurrent(Player)
		end
	end
end)
